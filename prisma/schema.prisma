datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
    id        String     @id @default(uuid())
    userId    String
    title     String     @db.Text
    imageUrl  String     @db.Text
    price     Float
    category  String     @db.Text
    chapters  Chapter[]
    purchases Purchase[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@fulltext([title])
}

model Chapter {
    id    String @id @default(uuid())
    title String

    videoUrl String? @db.Text

    isFree Boolean @default(false)

    muxData MuxData?

    courseId String
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    userProgress UserProgress[]

    quiz Quiz[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([courseId])
}

model Quiz {
    id        String   @id @default(uuid())
    question  String
    options   Json?
    isCorrect Boolean?

    chapterId String
    chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    @@index([chapterId])
}

model MuxData {
    id         String  @id @default(uuid())
    assetId    String
    playbackId String?

    chapterId String  @unique
    chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
    id     String @id @default(uuid())
    userId String

    chapterId String
    chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    isCompleted Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, chapterId])
    @@index([chapterId])
}

model Purchase {
    id     String @id @default(uuid())
    userId String

    courseId String
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()

    @@unique([userId, courseId])
    @@index([courseId])
}

model StripeCustomer {
    id               String @id @default(uuid())
    userId           String @unique
    stripeCustomerId String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
